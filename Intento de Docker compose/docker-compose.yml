version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
     - "2181:2181"    
    networks:
      api_bridge:
        aliases: 
          - zookeeper_host
#Kafka depende de zookeeper
  kafka:
    build: ./kafka
    ports:
     - "9092:9092"
    expose:
     - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "wather:1:1"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic weather --describe"]
      interval: 20s
      timeout: 120s
      retries: 20
    networks:
      api_bridge:
        aliases:
          - kafka_host
      
#El consumidor depende de que la base de datos este aceptando conexiones     
  consumer:
    build:
      context: ./backend/consumidor
      dockerfile: Dockerfile
    environment:
      - "PYTHONUNBUFFERED=1"
    volumes:
      - './backend/consumidor:/kafkaConsumer'
    depends_on:
      db: 
        condition: service_healthy
    links:
      - db
      - kafka
    networks:
      api_bridge:
        aliases: 
          - consumer_host
#El productor depende de kafka      
  producer:
    build:
      context: ./backend/productor
      dockerfile: Dockerfile
    environment:
      - "PYTHONUNBUFFERED=1"
    volumes:
      - './backend/productor:/kafkaProducer'
    depends_on:
      kafka:
        condition: service_healthy
    links:
      - kafka
    networks:
      api_bridge:
        aliases: 
          - producer_host
#La base de datos espera a que zookeper y kafka esten arriba
  db:
    image: cassandra:4.0.5
    environment:
      - CASSANDRA_CLUSTER_NAME=weather
    volumes:
      - ./database:/docker-entrypoint-initdb.d/
    ports:
      - 9042:9042
    depends_on:
      kafka:
        condition: service_healthy
    links:
      - kafka
networks:
      api_bridge:
        driver: bridge


